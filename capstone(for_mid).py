# -*- coding: utf-8 -*-
"""capstone(for mid).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wLf80geyuPhIIukc5w_E6oDoM-_Luu0G

***Step 1: Setup and Libraries***
"""

# Install necessary libraries
!pip install pandas numpy scikit-learn xgboost shap matplotlib seaborn geneticalgorithm streamlit joblib fastapi uvicorn optuna lime
!pip install shap==0.39.0

# Import necessary modules
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split, GridSearchCV, KFold
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from xgboost import XGBRegressor
import shap
import optuna  # For hyperparameter optimization
from geneticalgorithm import geneticalgorithm as ga
import joblib
from fastapi import FastAPI
import uvicorn
from tensorflow.keras import layers, regularizers, callbacks
import tensorflow as tf
from lime.lime_tabular import LimeTabularExplainer  # For local explainability
import shap

"""***Step 2: Load and Clean Dataset***"""

# Load the dataset using pandas
df = pd.read_csv('/content/Supply_Chain_Shipment_Pricing_Dataset.csv')

# Clean column names for easier access
df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")

# Check available columns
print(df.columns.tolist())
print(df.head(2))

"""***Step 3: Handle Date Columns***"""

# Convert relevant date columns to datetime format if they exist
date_cols = ['pq_first_sent_to_client_date', 'po_sent_to_vendor_date', 'scheduled_delivery_date',
             'delivered_to_client_date', 'delivery_recorded_date']
for col in date_cols:
    if col in df.columns:  # Check if the column exists
        df[col] = pd.to_datetime(df[col], format='%Y-%m-%d', errors='coerce')
    else:
        print(f"Warning: Column '{col}' does not exist in the DataFrame.")

"""***Step 4: Handle Numeric Columns and Missing Values***"""

# Handle potential missing values
df['freight_cost_(usd)'] = pd.to_numeric(df['freight_cost_(usd)'], errors='coerce')
df['line_item_insurance_(usd)'] = pd.to_numeric(df['line_item_insurance_(usd)'], errors='coerce')

# Fill missing values using interpolation
numeric_cols = df.select_dtypes(include=['number']).columns
df[numeric_cols] = df[numeric_cols].interpolate(method='linear')

# Create total cost based on existing data columns
if 'freight_cost_(usd)' in df.columns and 'line_item_insurance_(usd)' in df.columns:
    df['total_cost'] = df['freight_cost_(usd)'] + df['line_item_insurance_(usd)']
else:
    print("Warning: One of the columns for total cost calculation is missing.")

"""***Step 5: Exploratory Data Analysis and Scaling***"""

# Step 1: Basic Information
print("DataFrame Info:")
print(df.info())
print("\nFirst Few Rows of Data:")
print(df.head())

# Step 2: Descriptive Statistics
print("\nDescriptive Statistics:")
print(df.describe())

# Step 3: Check for Missing Values
print("\nMissing Values in Each Column:")
print(df.isnull().sum())

# Step 4: Data Types
print("\nData Types of Each Column:")
print(df.dtypes)

# Step 5: Correlation Matrix
# Convert relevant columns to numeric, coercing errors to NaN
numeric_columns = ['line_item_quantity', 'weight_(kilograms)', 'total_cost', 'freight_cost_(usd)']
for col in numeric_columns:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Check for missing values after conversion
print("\nMissing Values After Conversion to Numeric:")
print(df[numeric_columns].isnull().sum())

# Drop rows with NaN values in the columns to be analyzed
df.dropna(subset=numeric_columns, inplace=True)

# Correlation Matrix Visualization
plt.figure(figsize=(12, 8))
sns.heatmap(df[numeric_columns].corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

# Step 6: Pairplot to Visualize Relationships
sns.pairplot(df[numeric_columns])
plt.suptitle("Pairplot of Numeric Features", y=1.02)
plt.show()

# Step 7: Histograms of Numeric Features
df[numeric_columns].hist(bins=30, figsize=(12, 10))
plt.suptitle("Histograms of Numeric Features")
plt.show()

# Step 8: Boxplots to Check for Outliers
plt.figure(figsize=(12, 6))
for i, col in enumerate(numeric_columns):
    plt.subplot(2, 2, i + 1)
    sns.boxplot(y=df[col])
    plt.title(f'Boxplot of {col}')
plt.tight_layout()
plt.show()

#

"""***Step 6: Data Scaling***"""

# Step 6: Data Scaling
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[['line_item_quantity', 'total_cost', 'freight_cost_(usd)']])
df_scaled = pd.DataFrame(scaled_features, columns=['line_item_quantity', 'total_cost', 'freight_cost_(usd)'])

"""***Step 7: Predictive Modeling with XGBoost***"""

# Step 7: Predictive Modeling with XGBoost
X = df_scaled.drop('freight_cost_(usd)', axis=1)  # Features
y = df['freight_cost_(usd)']  # Target variable

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# XGBoost Model with hyperparameter optimization using Optuna
def objective(trial):
    param = {
        'n_estimators': trial.suggest_int('n_estimators', 100, 500),
        'max_depth': trial.suggest_int('max_depth', 3, 10),
        'learning_rate': trial.suggest_float('learning_rate', 1e-4, 1e-1, log=True),  # Updated line
        'subsample': trial.suggest_float('subsample', 0.5, 1.0),
        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.5, 1.0)
    }
    xgb_model = XGBRegressor(objective='reg:squarederror', **param)
    xgb_model.fit(X_train, y_train)
    y_pred = xgb_model.predict(X_test)
    return np.sqrt(mean_squared_error(y_test, y_pred))

# Optimize using Optuna
study = optuna.create_study(direction='minimize')
study.optimize(objective, n_trials=50)
print("Best parameters:", study.best_params)

# Train final model with the best parameters
xgb_reg = XGBRegressor(objective='reg:squarederror', **study.best_params)
xgb_reg.fit(X_train, y_train)

# Predict and evaluate
y_pred = xgb_reg.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)
print(f'RMSE: {rmse}, R2: {r2}')

"""***Step 8: Model Evaluation***"""

# Step 8: Model Evaluation
from sklearn.metrics import mean_absolute_error

# Evaluate model performance
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error (MAE): {mae}')
print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R^2 Score: {r2}')